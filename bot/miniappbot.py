import os
import logging
from dotenv import load_dotenv
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('TG_BOT_TOKEN')
WEBAPP_URL = os.getenv('TG_WEB_APP_URL')
SUPPORT_USERNAME = os.getenv('TG_SUPPORT_USERNAME', 'support').lstrip('@')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([BOT_TOKEN, WEBAPP_URL, SUPPORT_USERNAME]):
    missing = []
    if not BOT_TOKEN: missing.append('TG_BOT_TOKEN')
    if not WEBAPP_URL: missing.append('TG_WEB_APP_URL')
    if not SUPPORT_USERNAME: missing.append('TG_SUPPORT_USERNAME')
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫—Ä–∞—Å–∏–≤—ã–º –º–µ–Ω—é."""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )],
        
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about"),
            InlineKeyboardButton(text="üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME}")
        ]
    ])
    
    await update.message.reply_text(
        'üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 6 O\'clock Shop!*\n\n'
        'üî∏ –°—Ç–∏–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞\n'
        'üî∏ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã\n'
        'üî∏ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–∞—Å–∏–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ."""
    await update.callback_query.answer()
    
    about_text = (
        "üè™ *6 O'clock Shop*\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤:\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞ –æ—Ç –ª—É—á—à–∏—Ö –±—Ä–µ–Ω–¥–æ–≤\n"
        "‚Ä¢ –°—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –ª—é–±–æ–≥–æ –æ–±—Ä–∞–∑–∞\n"
        "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏\n\n"
        "üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ\n"
        "üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* –ü–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n"
        "üí≥ *–û–ø–ª–∞—Ç–∞:* –ö–∞—Ä—Ç—ã, –°–ë–ü, –Ω–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"
    )
    
    back_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await update.callback_query.message.edit_text(
        about_text,
        reply_markup=back_keyboard,
        parse_mode='Markdown'
    )

async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤."""
    await update.callback_query.answer()
    
    catalog_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üëï –û–¥–µ–∂–¥–∞", web_app=WebAppInfo(url=f"{WEBAPP_URL}/category/clothes"))],
        [InlineKeyboardButton("üëü –û–±—É–≤—å", web_app=WebAppInfo(url=f"{WEBAPP_URL}/category/shoes"))],
        [InlineKeyboardButton("üß¢ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", web_app=WebAppInfo(url=f"{WEBAPP_URL}/category/accessories"))],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await update.callback_query.message.edit_text(
        "üìã *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=catalog_keyboard,
        parse_mode='Markdown'
    )

async def new_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–∏–Ω–∫–∏."""
    await update.callback_query.answer()
    
    new_items_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–∏–Ω–∫–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}/new"))],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await update.callback_query.message.edit_text(
        "‚ú® *–ù–æ–≤–∏–Ω–∫–∏ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏*\n\n"
        "–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:",
        reply_markup=new_items_keyboard,
        parse_mode='Markdown'
    )

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.callback_query.answer()
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )],
        [
            InlineKeyboardButton(text="üëï –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
            InlineKeyboardButton(text="üî• –ù–æ–≤–∏–Ω–∫–∏", callback_data="new_items")
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about"),
            InlineKeyboardButton(text="üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME}")
        ]
    ])
    
    await update.callback_query.message.edit_text(
        'üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 6 O\'clock Shop!*\n\n'
        'üî∏ –°—Ç–∏–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞\n'
        'üî∏ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã\n'
        'üî∏ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(about, pattern="^about$"))
    application.add_handler(CallbackQueryHandler(catalog, pattern="^catalog$"))
    application.add_handler(CallbackQueryHandler(new_items, pattern="^new_items$"))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
    application.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        run_bot()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)



